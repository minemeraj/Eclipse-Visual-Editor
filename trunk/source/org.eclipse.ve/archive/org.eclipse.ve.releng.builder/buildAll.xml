<project default="run">


	<target name="init">
		<property name="buildDirectory" location="${basedir}/../src/eclipse" />
		<property name="testBase" location="${basedir}/../testing" />
		<available file="${buildDirectory}/label.properties" property="label.properties.exists" />
		<antcall target="create.label.properties" />
		<property file="${buildDirectory}/label.properties" />
		<property file="${buildDirectory}/maps/org.eclipse.ve.releng/maps/build.cfg" />
		<condition property="isReleaseBuild">
			<equals arg1="${buildType}" arg2="R"/>
		</condition>		
		<condition property="ftppush">
			<and>
				<available file="${basedir}/../org.eclipse.releng.basebuilder/plugins/org.eclipse.ant.optional.ftp/plugin.xml"/>
				<isset property="ftpUser"/>
				<isset property="ftpPassword"/>
				<not>
					<isset property="rsyncPWFile"/>
				</not>
			</and>
		</condition>
		<condition property="isWindows">
			<equals arg1="${platform}" arg2="Win32" />
		</condition>
		<condition property="isLinuxGTK">
			<equals arg1="${platform}" arg2="LinuxGTK" />
		</condition>
		<condition property="rsyncpush">
			<and>
				<not>
					<isset property="ftppush"/>
				</not>
				<isset property="rsyncPWFile"/>
			</and>
		</condition>
	</target>

	<target name="create.label.properties" unless="label.properties.exists">
		<mkdir dir="${buildDirectory}" />
		<tstamp/>
		<property name="date" value="${DSTAMP}" />
		<property name="time" value="${TSTAMP}" />
		<property name="timestamp" value="${date}${time}" />
		<property name="buildType" value="I" />
		<property name="buildId" value="${buildType}${date}" />

		<!--this naming convention used by php scripts on download server-->
		<property name="buildLabel" value="${buildType}-${buildId}-${timestamp}" />

		<!--store the build label information in a propert file-->
		<propertyfile file="${buildDirectory}/label.properties">
			<entry key="buildType" value="${buildType}"/>
			<entry key="buildId" value="${buildId}"/>
			<entry key="timestamp" value="${timestamp}"/>
			<entry key="buildLabel" value="${buildLabel}"/>
		</propertyfile>
	</target>

	<target name="run" depends="init" description="Do all, build all, test, and publish, but not push.">
		<antcall target="buildAll" />
		<antcall target="test" />
		<antcall target="publish" />
	</target>

	<target name="buildAll" depends="init,buildPerfCore,buildSDK,buildRuntime,buildSDKJEM,buildRuntimeJEM,buildExamples,buildTests">
	</target>
	
	<target name="buildPerfCore" depends="init">
		<ant antfile="build.xml" target="main">
			<property name="component" value="perfcore" />
		</ant>	
	</target>
	
	<target name="buildSDK" depends="init,buildPerfCore">
		<ant antfile="build.xml" target="main">
			<property name="component" value="sdk" />
		</ant>	
	</target>

	<target name="buildRuntime" depends="init,buildPerfCore">
		<ant antfile="build.xml" target="main">
			<property name="component" value="runtime" />
		</ant>	
	</target>
	
	<target name="buildSDKJEM" depends="init,buildPerfCore">
		<ant antfile="build.xml" target="main">
			<property name="component" value="sdkJEM" />
		</ant>	
	</target>

	<target name="buildRuntimeJEM" depends="init,buildPerfCore">
		<ant antfile="build.xml" target="main">
			<property name="component" value="runtimeJEM" />
		</ant>	
	</target>

	<target name="buildExamples" depends="init">
		<ant antfile="build.xml" target="main">
			<property name="component" value="examples" />
		</ant>	
	</target>
	
	<target name="buildTests" depends="init">
		<ant antfile="build.xml" target="main">
			<property name="component" value="tests" />
		</ant>	
	</target>
	

	<target name="test" unless="notest" depends="init" description="Run the tests">
		<property name="test.xml" value="../org.eclipse.releng.basebuilder/plugins/org.eclipse.build.tools/scripts/test.xml" />
		<!--<parallel>-->

		<antcall target="test-win32-local"/>
		<antcall target="test-linux-gtk-local"/>		

		<!--ant antfile="${test.xml}">
			<property name="tester" value="${basedir}/internalBuildTools/testConfigs/win32" />
		</ant>
		<ant antfile="${test.xml}">
			<property name="tester" value="${basedir}/internalBuildTools/testConfigs/linux-gtk" />
		</ant-->
		<!--</parallel>-->
	</target>

	<target name="test-win32-local" if="isWindows">
		<ant antfile="${test.xml}">
			<property name="tester" value="${basedir}/internalBuildTools/testConfigs/win32-local" />
		</ant>	
	</target>
	
	<target name="test-linux-gtk-local" if="isLinuxGTK">
		<ant antfile="${test.xml}">
			<property name="tester" value="${basedir}/internalBuildTools/testConfigs/linux-gtk-local" />
		</ant>	
	</target>	
	
	<target name="publish" depends="init" description="Publish the results, but don't push.">
		<property name="publish.xml" value="../org.eclipse.releng.basebuilder/plugins/org.eclipse.build.tools/scripts/publish.xml" />

		<property name="indexFileName" value="index.html" />
		<property name="result" value="${buildDirectory}/${buildLabel}" />

		<ant antfile="${publish.xml}" dir="${basedir}">
			<property name="dropTokenList" value="%sdk%,%runtime%,%examples%,%tests%,%sdkJEM%,%runtimeJEM%" />
			<property name="isBuildTested" value="true" />
		</ant>

		<!--  Get the build map over for the results to point to. -->
		<copy file="${buildDirectory}/maps/org.eclipse.ve.releng/maps/ve.map" tofile="${result}/directory.txt"/>

		<replace file="${result}/${indexFileName}">
		 	<!--  Insert url for supported eclipse drop-->
			<replacefilter token="@eclipseBuildID@" value="${eclipseBuildID}"/>
			<replacefilter token="@eclipseURL@" value="${eclipseURL}"/>
			<replacefilter token="@eclipseZipURL@" value="${eclipseWin32ZipURL}"/>		
	
		 	<!--  Insert url for supported EMF -->
			<replacefilter token="@emfBuildID@" value="${emfBuildID}"/>
			<replacefilter token="@emfURL@" value="${emfURL}"/>
			<replacefilter token="@emfZipURL@" value="${emfZipURL}"/>		

		 	<!--  Insert url for supported GEF -->
			<replacefilter token="@gefBuildID@" value="${gefBuildID}"/>
			<replacefilter token="@gefURL@" value="${gefURL}"/>
			<replacefilter token="@gefZipURL@" value="${gefZipURL}"/>
		</replace>
	</target>
	
	<!-- Copy to "bldindex.html". This html will be used to reference locally without download counting. This file will not be pushed to main download site. -->
	<copy file="${result}/${indexFileName}" tofile="${result}/bld${indexFileName}"/>
	
	<!-- Replace the base variables to be nothing for bld-index, and the full reroute url for the main index file. -->
	<replace file="${result}/${indexFileName}" token="@base@" value="http://www.eclipse.org/downloads/download.php?file=/tools/ve/downloads/drops/${buildLabel}/"/>
	<replace file="${result}/bld${indexFileName}" token="@base@" value=""/>	
	
	<target name="push" depends="init,pushftp,pushrsync" description="Push the results to the download site.">
	</target>
	
	<target name="pushftp" if="ftppush">
		<property name="remoteDirectory" value="/home/www/tools/ve/downloads/drops"/>
		<echo message="FTP to: ${remoteDirectory}/${buildLabel}"/>	
	  	<ftp server="download1.eclipse.org"
       		userid="${ftpUser}"
		      password="${ftpPassword}"
			remotedir="${remoteDirectory}">
		    <fileset dir="${buildDirectory}">
				<include name="${buildLabel}/**"/>
				<exclude name="${buildLabel}/bldindex.html"/>
		    </fileset>
		</ftp>
		
		<!-- There may not be anything in buildnotes. ftp won't create directory in that case. But we must have one. -->
	  	<ftp server="download1.eclipse.org"
       		userid="${ftpUser}"
		      password="${ftpPassword}"
			action="mkdir"
			remotedir="${remoteDirectory}/${buildLabel}/buildnotes">
		</ftp>
		
	</target>
		
	<target name="pushrsync" if="rsyncpush">
		<property name="remoteDirectory" value="downloads/drops"/>
		<echo message="RSYNC to: ${remoteDirectory}/${buildLabel}"/>
		<!-- Need to get permissions correct so that Webserver will work. -->
		<chmod dir="${buildDirectory}" type="file" perm="ugo+r" includes="${buildLabel}/**"/>
		<chmod dir="${buildDirectory}" type="file" perm="ug+rw" includes="${buildLabel}/**"/>		
		<chmod dir="${buildDirectory}" type="dir" perm="ugo+rx" includes="${buildLabel}*/**"/>
		<chmod dir="${buildDirectory}" type="dir" perm="ug+rwx" includes="${buildLabel}*/**"/>				
		<exec dir="${buildDirectory}" executable="rsync">
			<arg line="-avz --password-file=${rsyncPWFile} --stats --exclude bldindex.html ${buildLabel} versync@download1.eclipse.org::eclipseVeTools/${remoteDirectory}" />
		</exec>
	</target>
	
	<target name="publishdevupdate" depends="init">
		<property name="updateRemoteDirectory" value="updates/1.0/development"/>
		<property name="updateLocalDirectory" value="${buildDirectory}/update/${buildLabel}"/>
		<property name="devtype" value="-cats ${updateLocalDirectory}/catsdev.properties -catxml ${updateLocalDirectory}/catdevxml.xml -add4thPart"/>
		<antcall target="publishupdatesite"/>
	</target>
	
	<target name="publishpushreleaseupdatesite" if="isReleaseBuild" description="Puplish and push the update site for a release. Only available for a release build.">
		<antcall target="publishupdatesite"/>
		<antcall target="pushupdatesite"/>
	</target>
	
	<target name="publishupdatesite" if="rsyncPWFile" depends="init">
		<!-- Publish to update site, but not push it. -->
		<echo message="Publish the update site for the latest build."/>
		<property name="updateRemoteDirectory" value="updates/1.0"/>
		<property name="updateLocalDirectory" value="${buildDirectory}/update/${buildLabel}"/>
		<delete dir="${updateLocalDirectory}"/>
		<mkdir dir="${updateLocalDirectory}"/>
		
		<!-- Now copy the site update tools files into local directory for processing. -->
		<copy todir="${updateLocalDirectory}">
			<fileset dir="internalBuildTools/siteUpdateTools"/>
		</copy>
		
		<!-- Now build the update program. -->
	    <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
		<property name="eclipse.version" value="3.0.0"/>
		<available file="${eclipse.home}/plugins/org.eclipse.osgi_${eclipse.version}" property="versionFound"/>
		<fail unless="versionFound" message="Failed due to ${eclipse.version} Eclipse not being used. If upgraded, need to upgrade this buildAll.xml too."/>
		<mkdir dir="${updateLocalDirectory}/bin"/>
	    <javac verbose="true" failonerror="true" srcdir="${updateLocalDirectory}" destdir="${updateLocalDirectory}/bin" classpath="${eclipse.home}/plugins/org.eclipse.osgi_${eclipse.version}/osgi.jar:${eclipse.home}/plugins/org.eclipse.osgi_${eclipse.version}/core.jar"/>

		<!-- Now get the latest build SDK and unzip into the local directory for processing. -->
		<exec dir="${updateLocalDirectory}" executable="unzip">
			<arg line="-o -qq ${buildDirectory}/${buildLabel}/VE-SDK-*.zip -d ."/>
	    </exec>
		
		<!-- Now get the current update site.xml from the download site so that we can update it. -->
		<exec dir="." executable="rsync">
			<arg line="-avz --password-file=${rsyncPWFile} --stats versync@download1.eclipse.org::eclipseVeTools/${updateRemoteDirectory}/site.xml ${updateLocalDirectory}" />
		</exec>

		<!-- Now run the update process -->
		<property value="-cats ${updateLocalDirectory}/cats.properties" name="devtype"/>
	    <java classname="org.eclipse.releng.generators.UpdateBuilder" failonerror="true">
	         <arg line="-root ${updateLocalDirectory}/eclipse -site ${updateLocalDirectory}/site -sitexml ${updateLocalDirectory}/site.xml -build ${buildId} -size ${devtype}" /> 
	         <classpath>
	            	<pathelement path="${updateLocalDirectory}/bin:${eclipse.home}/plugins/org.eclipse.osgi_${eclipse.version}/osgi.jar:${eclipse.home}/plugins/org.eclipse.osgi_${eclipse.version}/core.jar" />
	         </classpath>
	    </java>

	</target>
	
	<target name="pushupdatesite" if="rsyncpush" depends="init">
		<echo message="Push the update site to the download site."/>
		<property name="updateRemoteDirectory" value="updates/1.0"/>
		<property name="updateLocalDirectory" value="${buildDirectory}/update/${buildLabel}"/>
				
		<!-- Now make a backup of the site.xml that we previously updated. -->
		<chmod dir="${updateLocalDirectory}" type="file" perm="ugo+r" includes="site.xml"/>
		<chmod dir="${updateLocalDirectory}" type="file" perm="ug+rw" includes="site.xml"/>		
		<exec dir="." executable="rsync">
			<arg line="-avz --password-file=${rsyncPWFile} --stats ${updateLocalDirectory}/site.xml versync@download1.eclipse.org::eclipseVeTools/${updateRemoteDirectory}/site.xml.bak " />
		</exec>
		
		<!-- Now push the updates themselves back. -->
		<chmod dir="${updateLocalDirectory}" type="file" perm="ugo+r" includes="site/**"/>
		<chmod dir="${updateLocalDirectory}" type="file" perm="ug+rw" includes="site/**"/>		
		<chmod dir="${updateLocalDirectory}" type="dir" perm="ugo+rx" includes="site/**"/>
		<chmod dir="${updateLocalDirectory}" type="dir" perm="ug+rwx" includes="site/**"/>				
		
		<exec dir="." executable="rsync">
			<arg line="-avz --password-file=${rsyncPWFile} --stats ${updateLocalDirectory}/site/ versync@download1.eclipse.org::eclipseVeTools/${updateRemoteDirectory}" />
		</exec>

	</target>

</project>