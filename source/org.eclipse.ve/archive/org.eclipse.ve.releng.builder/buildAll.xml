<project default="run">


	<target name="init">
		<property name="buildDirectory" location="${basedir}/../src/eclipse" />
		<available file="${buildDirectory}/label.properties" property="label.properties.exists" />
		<antcall target="create.label.properties" />
		<property file="${buildDirectory}/label.properties" />
		<property file="${buildDirectory}/maps/org.eclipse.ve.releng/maps/build.cfg" />
		<condition property="ftppush">
			<and>
				<available file="${basedir}/../org.eclipse.releng.basebuilder/plugins/org.eclipse.ant.optional.ftp/plugin.xml"/>
				<isset property="ftpUser"/>
				<isset property="ftpPassword"/>
			</and>
		</condition>
		<property name="remoteDirectory" value="/home/www/tools/ve/downloads/drops"/>
	</target>

	<target name="create.label.properties" unless="label.properties.exists">
		<mkdir dir="${buildDirectory}" />
		<tstamp/>
		<property name="date" value="${DSTAMP}" />
		<property name="time" value="${TSTAMP}" />
		<property name="timestamp" value="${date}${time}" />
		<property name="buildType" value="I" />
		<property name="buildId" value="${buildType}${date}" />

		<!--this naming convention used by php scripts on download server-->
		<property name="buildLabel" value="${buildType}-${buildId}-${timestamp}" />

		<!--store the build label information in a file-->
		<echo file="${buildDirectory}/label.properties" append="true" >
		buildType=${buildType}
		</echo>
		<echo file="${buildDirectory}/label.properties" append="true" >
		buildId=${buildId}
		</echo>
		<echo file="${buildDirectory}/label.properties" append="true" >
		timestamp=${timestamp}
		</echo>
		<echo file="${buildDirectory}/label.properties" append="true" >
		buildLabel=${buildLabel}
		</echo>
	</target>

	<target name="run" depends="init">
		<antcall target="buildAll" />
		<antcall target="test" />
		<antcall target="publish" />
		<antcall target="push" />
	</target>

	<target name="buildAll" depends="init">
		<ant antfile="build.xml" target="main">
			<property name="component" value="sdk" />
		</ant>
		<ant antfile="build.xml" target="main">
			<property name="component" value="runtime" />
		</ant>
		<ant antfile="build.xml" target="main">
			<property name="component" value="examples" />
		</ant>
		<ant antfile="build.xml" target="main">
			<property name="component" value="tests" />
		</ant>
	</target>

	<target name="test" depends="init">
		<property name="test.xml" value="../org.eclipse.releng.basebuilder/plugins/org.eclipse.build.tools/scripts/test.xml" />
		<!--<parallel>-->

		<ant antfile="${test.xml}">
			<property name="tester" value="${basedir}/internalBuildTools/testConfigs/win32-local" />
		</ant>

		<!--ant antfile="${test.xml}">
			<property name="tester" value="${basedir}/internalBuildTools/testConfigs/win32" />
		</ant>
		<ant antfile="${test.xml}">
			<property name="tester" value="${basedir}/internalBuildTools/testConfigs/linux-gtk" />
		</ant-->
		<!--</parallel>-->
	</target>

	<target name="publish" depends="init">
		<property name="publish.xml" value="../org.eclipse.releng.basebuilder/plugins/org.eclipse.build.tools/scripts/publish.xml" />

		<property name="indexFileName" value="index.html" />
		<property name="result" value="${buildDirectory}/${buildLabel}" />

		<ant antfile="${publish.xml}" dir="${basedir}">
			<property name="dropTokenList" value="%sdk%,%runtime%,%examples%,%tests%" />
			<property name="isBuildTested" value="true" />
		</ant>

		<!--  Get the build map over for the results to point to. -->
		<copy file="${buildDirectory}/maps/org.eclipse.ve.releng/maps/ve.map" tofile="${result}/directory.txt"/>

	 	<!--  Insert url for supported eclipse drop-->
		<replace file="${result}/${indexFileName}" token="@eclipseBuildID@" value="${eclipseBuildID}"/>
		<replace file="${result}/${indexFileName}" token="@eclipseURL@" value="${eclipseURL}"/>
		<replace file="${result}/${indexFileName}" token="@eclipseZipURL@" value="${eclipseZipURL}"/>		
	
	 	<!--  Insert url for supported EMF -->
		<replace file="${result}/${indexFileName}" token="@emfBuildID@" value="${emfBuildID}"/>
		<replace file="${result}/${indexFileName}" token="@emfURL@" value="${emfURL}"/>
		<replace file="${result}/${indexFileName}" token="@emfZipURL@" value="${emfZipURL}"/>		

	 	<!--  Insert url for supported GEF -->
		<replace file="${result}/${indexFileName}" token="@gefBuildID@" value="${gefBuildID}"/>
		<replace file="${result}/${indexFileName}" token="@gefURL@" value="${gefURL}"/>
		<replace file="${result}/${indexFileName}" token="@gefZipURL@" value="${gefZipURL}"/>
	</target>
	
	<target name="push" depends="init,pushftp,pushrsync">
	</target>
	
	<target name="pushftp" if="ftppush">
		<!-- There may not be anything in buildnotes. ftp won't create directory in that case. But we must have one. -->
	  	<ftp server="download.eclipse.org"
       		userid="${ftpUser}"
		      password="${ftpPassword}"
			action="mkdir"
			remotedir="${remoteDirectory}/${buildLabel}/buildnotes">
		</ftp>

	  	<ftp server="download.eclipse.org"
       		userid="${ftpUser}"
		      password="${ftpPassword}"
			remotedir="${remoteDirectory}">
		    <fileset dir="${buildDirectory}">
				<include name="${buildLabel}/**"/>
		    </fileset>
		</ftp>
	</target>
		
	<target name="pushrsync" if="rsyncpush"/>
	
</project>