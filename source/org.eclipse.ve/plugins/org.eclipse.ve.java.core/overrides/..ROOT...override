<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:org.eclipse.ve.internal.cde.decorators="http:///org/eclipse/ve/internal/cde/decorators.ecore"
    xmlns:org.eclipse.ve.internal.cde.utility="http:///org/eclipse/ve/internal/cde/utility.ecore" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore"
    xmlns:codeGenHelpers="platform:/plugin/org.eclipse.ve.java.core/overrides/codegenHelpers.ecore"    
    xmlns:event="event.xmi">
  <event:AddMany  featureName="eAnnotations">
    <addedEObjects xsi:type="org.eclipse.ve.internal.cde.decorators:ClassDescriptorDecorator"
        treeViewClassname="org.eclipse.ve.java.core/org.eclipse.ve.internal.java.core.JavaBeanTreeEditPart"
        graphViewClassname="org.eclipse.ve.java.core/org.eclipse.ve.internal.java.core.JavaBeanGraphicalEditPart"
        labelProviderClassname="org.eclipse.ve.java.core/org.eclipse.ve.internal.java.core.DefaultJavaBeanLabelProvider">
      <graphic xsi:type="org.eclipse.ve.internal.cde.utility:GIFFileGraphic" resourceName="platform:/plugin/org.eclipse.ve.java.core/icons/full/clcl16/javabean_obj.gif"/>
    </addedEObjects>
    <addedEObjects xsi:type="org.eclipse.ve.internal.cde.decorators:PropertySourceAdapterInformation"
        propertySourceAdapterClassname="org.eclipse.ve.java.core/org.eclipse.ve.internal.java.core.BeanPropertySourceAdapter"/>       
      
    <!-- Add a property renderer to object so that everyone is displayed using the java.beans.PropertyEditor
         if one can be found. Some primitive objects such as String and boolean however have a toString
         editor installed that avoids having to instantiate the target editor -->        
    <addedEObjects xsi:type="org.eclipse.ve.internal.cde.decorators:BasePropertyDecorator"
        labelProviderClassname="org.eclipse.ve.java.core/org.eclipse.ve.internal.java.core.BeanCellRenderer"/>
    <addedEObjects xsi:type="codeGenHelpers:CodeGenHelperClass" source="codegen.CodeGenHelperClass"
        expDecoder="org.eclipse.ve.java.core/org.eclipse.ve.internal.java.codegen.java.ObjectDecoder"
        eventDecoder="org.eclipse.ve.java.core/org.eclipse.ve.internal.java.codegen.java.ObjectEventDecoder"
        methodGenerator="org.eclipse.ve.java.core/org.eclipse.ve.internal.java.codegen.util.DefaultMethodTextGenerator"/>
        
  </event:AddMany>
  <event:Add  featureName="eStructuralFeatures">
    <!-- Events are modeled as instances of AbstractEventInvocation on any Root class
         Two subclasses of this exist, EventInvocation which is for events whose source is an EventSetDescriptor, e.g. Button>actionPeformed
         and the other subclass is PropertyChangeEventInvocation for events who source is a PropertyDescriptor, e.g. Button>font -->  
    <addedEObjects xsi:type="ecore:EReference" name="events" eType="ecore:EClass http:///org/eclipse/ve/internal/jcm.ecore#//AbstractEventInvocation"
        upperBound="-1" containment="true"/>
  </event:Add>
  
  <!-- Special one. We need to add an annotation to an attribute that was previously added in another plugin.
       These are the property decorators for the initstring stuff. Added separately because they
       aren't available at java.model level, but are available at this level. -->
  <event:Add notifierURI="#/allocation" featureName="eAnnotations">
    <addedEObjects xsi:type="org.eclipse.ve.internal.cde.decorators:PropertyDescriptorDecorator" hidden="true"/>
  </event:Add>
</xmi:XMI>
